{"version":3,"sources":["components/Card.js","components/Cardlist.js","robots.js","components/Search.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","name","alt","email","Cardlist","robots","cardcomponent","map","user","i","key","id","username","Search","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflow","border","height","children","App","onsearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filterbot","filter","toLowerCase","includes","length","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1635d04f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n\treturn (\r\n\t<div className = \"bg-light-green dib ma2 br3 pa3 grow pointer\">\r\n\t\t<img src={`https://robohash.org/${props.name}?100x100`} alt=\"robo\" />\r\n\t\t<div>\r\n\t\t\t<h2>{props.name}</h2>\r\n\t\t\t<p>{props.email}</p>\r\n\t\t</div>\r\n\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst Cardlist= ({robots}) => {\r\n\tconst cardcomponent=robots.map((user,i) => {\r\n\t\treturn <Card key={robots[i].id} id={robots[i].id} name={robots[i].name} email={robots[i].email} />\r\n\t})\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{cardcomponent}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Cardlist;"," export const robots =[\r\n\r\n{\r\n\tid:1,\r\n\tname:'rogers',\r\n\temail:'cap@fakemail.com',\r\n\tusername:'captain'\r\n},\r\n{\r\n\tid:2,\r\n\tname:'tony',\r\n\temail:'tony@fakemail.com',\r\n\tusername:'iron man'\r\n},\r\n{\r\n\tid:3,\r\n\tname:'Thor',\r\n\temail:'thor@fakemail.com',\r\n\tusername:'mighty'\r\n},\r\n{\r\n\tid:7,\r\n\tname:'shivam',\r\n\temail:'thor@fakemail.com',\r\n\tusername:'mighty'\r\n},\r\n{\r\n\tid:4,\r\n\tname:'amit',\r\n\temail:'tony@fakemail.com',\r\n\tusername:'iron man'\r\n},\r\n{\r\n\tid:5,\r\n\tname:'Thor',\r\n\temail:'thor@fakemail.com',\r\n\tusername:'mighty'\r\n},\r\n{\r\n\tid:6,\r\n\tname:'Devu',\r\n\temail:'thor@fakemail.com',\r\n\tusername:'mighty'\r\n},\r\n{\r\n\tid:41,\r\n\tname:'keshav',\r\n\temail:'tony@fakemail.com',\r\n\tusername:'iron man'\r\n},\r\n{\r\n\tid:42,\r\n\tname:'tony stark',\r\n\temail:'tony@fakemail.com',\r\n\tusername:'iron man'\r\n},\r\n{\r\n\tid:43,\r\n\tname:'tony stark',\r\n\temail:'tony@fakemail.com',\r\n\tusername:'iron man'\r\n},\r\n{\r\n\tid:4151,\r\n\tname:'tony stark',\r\n\temail:'tony@fakemail.com',\r\n\tusername:'iron man'\r\n},\r\n]\r\n","import React from 'react'\r\n\r\nconst Search =({searchfield,searchChange}) =>{\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t<input className=\"pa3 ba b--green bg-lightest-blue\"\r\n\t\t type='search'\r\n\t\t placeholder=\"Search Robots\" \r\n\t\t onChange={searchChange}\r\n\t\t />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{overflow: 'scroll',border:'2px solid black',height:'750px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t\t);\r\n}\r\nexport default Scroll","import React,{Component} from 'react';\r\nimport Cardlist from '../components/Cardlist'\r\nimport {robots} from '../robots';\r\nimport Search from '../components/Search';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\nclass App extends Component{\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state ={\r\n\t\t\trobots:robots,\r\n\t\t\tsearchfield:''\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => response.json())\r\n\t\t.then(users => this.setState({robots:users}));\r\n\t}\r\n\r\n\tonsearchChange = (event) =>{\r\n\t\tthis.setState({searchfield:event.target.value})\r\n\r\n\t}\r\n\trender() {\r\n\t\tconst{ robots,searchfield}=this.state;\r\n\t\tconst filterbot=robots.filter(robots=>{\r\n\t\treturn robots.name.toLowerCase().includes(searchfield.toLowerCase())\r\n\t})\r\n\t\tif(robots.length==0)\r\n\t\t\t\treturn <h1>Loading...</h1>\r\n\t\telse{\r\n\t\t\treturn (\r\n\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t<h1>Robofriends</h1>\r\n\t\t\t\t\t<Search searchChange={this.onsearchChange}/>\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t<Cardlist robots={filterbot} />\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport './index.css'\nReactDOM.render(\n\t\t\t<App /> , document.getElementById('root'));\n\t\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}